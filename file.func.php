<?phpdefine('MY_ROOT', str_replace("\\", '/', dirname(__FILE__)) . "/..");define('IN_CACHE', 1);//基本常量define('IF_WIN', strpos(strtoupper(PHP_OS), 'WIN') !== false ? true : false);define('MY_CHMOD', (0777 && !IF_WIN) ? 0777 : 0);define('MY_CACHE', MY_ROOT . '/mycache');if (!is_dir(MY_CACHE)) {    mkdir(MY_CACHE, MY_CHMOD, true);}//region 方法if (!function_exists('file_put_contents')) {    define('FILE_APPEND', 8);    function file_put_contents($file, $string, $append = '')    {        $mode = $append == '' ? 'wb' : 'ab';        $fp = @fopen($file, $mode) or exit("Can not open $file");        flock($fp, LOCK_EX);        $stringlen = @fwrite($fp, $string);        flock($fp, LOCK_UN);        @fclose($fp);        return $stringlen;    }}function file_ext($filename){    if (strpos($filename, '.') === false) return '';    $ext = strtolower(trim(substr(strrchr($filename, '.'), 1)));    return preg_match("/^[a-z0-9]{1,10}$/", $ext) ? $ext : '';}function file_vname($name){    if (strpos($name, '/') === false) return str_replace(array(' ', '\\', ':', '*', '?', '"', '<', '>', '|', "'", '$', '&', '%', '#', '@'), array('-', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''), $name);    $tmp = explode('/', $name);    $str = '';    foreach ($tmp as $k => $v) {        $str .= ($k ? '/' : '') . file_vname($v);    }    return $str;}function file_down($file, $filename = '', $data = ''){    if (!$data && !is_file($file)) exit;    $filename = $filename ? $filename : basename($file);    $filetype = file_ext($filename);    $filesize = $data ? strlen($data) : filesize($file);    ob_end_clean();    @set_time_limit(0);    if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false) {        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');        header('Pragma: public');    } else {        header('Pragma: no-cache');    }    header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');    header('Content-Encoding: none');    header('Content-Length: ' . $filesize);    header('Content-Disposition: attachment; filename=' . $filename);    header('Content-Type: ' . $filetype);    if ($data) {        echo $data;    } else {        readfile($file);    }    exit;}function file_list($dir, $fs = array(), $lowerext = ''){    $files = glob($dir . '/*');    if (!is_array($files)) return $fs;    foreach ($files as $file) {        if (is_dir($file)) {            $fs = file_list($file, $fs, $lowerext);        } else {            if ($lowerext === '')                $fs[] = $file;            else {                if (strtolower(pathinfo($file, PATHINFO_EXTENSION)) === $lowerext) {                    $fs[] = $file;                }            }        }    }    return $fs;}function dir_list($dir, $fs = array()){    $files = glob($dir . '/*');    if (!is_array($files)) return $fs;    foreach ($files as $file) {        if (is_dir($file)) {            $fs[] = $file;        }    }    return $fs;}function file_copy($from, $to){    $mypath = "http://{$_SERVER['SERVER_NAME']}/";    dir_create(dirname($to));    if (is_file($to) && MY_CHMOD) @chmod($to, MY_CHMOD);    if (strpos($from, $mypath) !== false) $from = str_replace($mypath, MY_ROOT . '/', $from);    if (@copy($from, $to)) {        if (MY_CHMOD) @chmod($to, MY_CHMOD);        return true;    } else {        return false;    }}function file_put($filename, $data){    dir_create(dirname($filename));    if (@$fp = fopen($filename, 'wb')) {        flock($fp, LOCK_EX);        $len = fwrite($fp, $data);        flock($fp, LOCK_UN);        fclose($fp);        if (MY_CHMOD) @chmod($filename, MY_CHMOD);        return $len;    } else {        return false;    }}function file_get($filename){    return @file_get_contents($filename);}function file_del($filename){    if (MY_CHMOD) @chmod($filename, MY_CHMOD);    return is_file($filename) ? @unlink($filename) : false;}function dir_path($dirpath){    $dirpath = str_replace('\\', '/', $dirpath);    if (substr($dirpath, -1) != '/') $dirpath = $dirpath . '/';    return $dirpath;}function dir_create($path){    if (is_dir($path)) return true;    if (MY_CACHE != MY_ROOT . '/file/cache' && strpos($path, MY_CACHE) !== false) {        $dir = str_replace(MY_CACHE . '/', '', $path);        $dir = dir_path($dir);        $temp = explode('/', $dir);        $cur_dir = MY_CACHE . '/';        $max = count($temp) - 1;        for ($i = 0; $i < $max; $i++) {            $cur_dir .= $temp[$i] . '/';            if (is_dir($cur_dir)) continue;            @mkdir($cur_dir);            if (MY_CHMOD) @chmod($cur_dir, MY_CHMOD);        }    } else {        $dir = str_replace(MY_ROOT . '/', '', $path);        $dir = dir_path($dir);        $temp = explode('/', $dir);        $cur_dir = MY_ROOT . '/';        $max = count($temp) - 1;        for ($i = 0; $i < $max; $i++) {            $cur_dir .= $temp[$i] . '/';            if (is_dir($cur_dir)) continue;            @mkdir($cur_dir);            if (MY_CHMOD) @chmod($cur_dir, MY_CHMOD);        }    }    return is_dir($path);}function dir_chmod($dir, $mode = '', $require = 0){    if (!$require) $require = substr($dir, -1) == '*' ? 2 : 0;    if ($require) {        if ($require == 2) $dir = substr($dir, 0, -1);        $dir = dir_path($dir);        $list = glob($dir . '*');        foreach ($list as $v) {            if (is_dir($v)) {                dir_chmod($v, $mode, 1);            } else {                @chmod(basename($v), $mode);            }        }    }    if (is_dir($dir)) {        @chmod($dir, $mode);    } else {        @chmod(basename($dir), $mode);    }}function dir_copy($fromdir, $todir){    $fromdir = dir_path($fromdir);    $todir = dir_path($todir);    if (!is_dir($fromdir)) return false;    if (!is_dir($todir)) dir_create($todir);    $list = glob($fromdir . '*');    foreach ($list as $v) {        $path = $todir . basename($v);        if (is_file($path) && !is_writable($path)) {            if (MY_CHMOD) @chmod($path, MY_CHMOD);        }        if (is_dir($v)) {            dir_copy($v, $path);        } else {            @copy($v, $path);            if (MY_CHMOD) @chmod($path, MY_CHMOD);        }    }    return true;}function dir_delete($dir){    $dir = dir_path($dir);    if (!is_dir($dir)) return false;    $dirs = array(MY_ROOT . '/admin/', MY_ROOT . '/api/', MY_CACHE . '/', MY_ROOT . '/file/', MY_ROOT . '/include/', MY_ROOT . '/lang/', MY_ROOT . '/member/', MY_ROOT . '/module/', MY_ROOT . '/skin/', MY_ROOT . '/template/', MY_ROOT . '/mobile/');    if (substr($dir, 0, 1) == '.' || in_array($dir, $dirs)) die("Cannot Remove System DIR $dir ");    $list = glob($dir . '*');    if ($list) {        foreach ($list as $v) {            is_dir($v) ? dir_delete($v) : @unlink($v);        }    }    return @rmdir($dir);}function get_file($dir, $ext = '', $fs = array()){    $files = glob($dir . '/*');    if (!is_array($files)) return $fs;    foreach ($files as $file) {        if (is_dir($file)) {            if (is_file($file . '/index.php') && is_file($file . '/config.inc.php')) continue;            $fs = get_file($file, $ext, $fs);        } else {            if ($ext) {                if (preg_match("/\.($ext)$/i", $file)) $fs[] = $file;            } else {                $fs[] = $file;            }        }    }    return $fs;}function is_write($file){    if (IF_WIN) {        if (substr($file, -1) == '/') {            if (is_dir($file)) {                $file = $file . 'writeable-test.tmp';                if (@$fp = fopen($file, 'a')) {                    flock($fp, LOCK_EX);                    fwrite($fp, 'OK');                    flock($fp, LOCK_UN);                    fclose($fp);                    $tmp = file_get_contents($file);                    unlink($file);                    if ($tmp == 'OK') return true;                }                return false;            } else {                dir_create($file);                if (is_dir($file)) return is_write($file);                return false;            }        } else {            if (@$fp = fopen($file, 'a')) {                fclose($fp);                return true;            }            return false;        }    } else {        return is_writeable($file);    }}function strip_nr($string, $js = false){    $string = str_replace(array(chr(13), chr(10), "\n", "\r", "\t", '  '), array('', '', '', '', '', ''), $string);    if ($js) $string = str_replace("'", "\'", $string);    return $string;}function cache_read($file, $dir = '', $mode = ''){    $file = $dir ? MY_CACHE . '/' . $dir . '/' . $file : MY_CACHE . '/' . $file;    if (!is_file($file)) return $mode ? '' : array();    return $mode ? file_get($file) : include $file;}function cache_write($file, $string, $dir = ''){    if (is_array($string)) $string = "<?php defined('IN_CACHE') or exit('Access Denied'); return " . strip_nr(var_export($string, true)) . "; ?>";    $file = $dir ? MY_CACHE . '/' . $dir . '/' . $file : MY_CACHE . '/' . $file;    $strlen = file_put($file, $string);    return $strlen;}function cache_delete($file, $dir = ''){    $file = $dir ? MY_CACHE . '/' . $dir . '/' . $file : MY_CACHE . '/' . $file;    return file_del($file);}function arrayAdd($item, $filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $datasource['c']++;    $datasource['res'][] = $item;    $datasource['res'][(count($datasource['res']) - 1)]['zqid'] = $datasource['c'];    if (cache_write($filename, $datasource)) {        return $datasource['c']; //返回zqid    } else {        return false;    }}function arrayDel($zqid, $filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $res = $datasource['res'];    foreach ($res as $k => $v) {        if ($v['zqid'] == $zqid) {            unset($res[$k]);        }    }    $datasource['res'] = $res;    if (cache_write($filename, $datasource)) {        return true;    } else {        return false;    }}function arrayModi($zqid, $item, $filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $res = $datasource['res'];    foreach ($res as $k => $v) {        if ($v['zqid'] == $zqid) {            unset($res[$k]);            $res[$k] = $item;            $res[$k]['zqid'] = intval($zqid);        }    }    $datasource['res'] = $res;    if (cache_write($filename, $datasource)) {        return true;    } else {        return false;    }}function arrayGet($filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $res = $datasource['res'];    return $res;}function arrayGetByID($zqid, $filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $res = $datasource['res'];    $res = array_filter($res, function ($v) use ($zqid) {        return $v['zqid'] == $zqid;    });    return array_values($res);}function arrayGetMaxID($filename){    $datasource = cache_read($filename);    if (!isset($datasource['res'])) {        $datasource['res'] = array();        $datasource['c'] = 0;    }    $c = $datasource['c'];    return $c;}//endregion